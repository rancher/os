FROM ubuntu:16.04

RUN apt-get update && \
    apt-get install -y \
        build-essential \
        ca-certificates \
        cpio \
        curl \
        dosfstools \
        gccgo \
        genisoimage \
        git \
        grub-efi \
        isolinux \
        less \
        libblkid-dev \
        libmount-dev \
        libselinux1-dev \
        locales \
        module-init-tools \
        pkg-config \
        python-pip \
        qemu \
        qemu-kvm \
        rsync \
        sudo \
        tox \
        unzip \
        vim \
        wget \
        xorriso

ENV DAPPER_DOCKER_SOCKET true
ENV DAPPER_SOURCE /go/src/github.com/rancher/os
ENV DAPPER_OUTPUT ./bin ./dist ./build/os-config.yml
ENV DAPPER_RUN_ARGS --privileged
ENV SHELL /bin/bash
WORKDIR ${DAPPER_SOURCE}

########## General Configuration #####################
ARG ARCH=amd64
ARG DAPPER_HOST_ARCH=amd64
ARG HOST_ARCH=${DAPPER_HOST_ARCH}

ARG OS_REPO=rancher
ARG HOSTNAME_DEFAULT=rancher
ARG DISTRIB_ID=RancherOS

ARG DOCKER_VERSION=1.10.3
ARG DOCKER_PATCH_VERSION=v${DOCKER_VERSION}-ros1
ARG SELINUX_POLICY_URL=https://github.com/rancher/refpolicy/releases/download/v0.0.2/policy.29

ARG KERNEL_URL_amd64=https://github.com/rancher/os-kernel/releases/download/Ubuntu-4.2.0-34.39-rancher/linux-4.2.8-ckt4-rancher-x86.tar.gz
ARG KERNEL_URL_arm64=https://github.com/imikushin/os-kernel/releases/download/Estuary-4.1.18-arm64-3/linux-4.1.18-arm64.tar.gz

ARG DOCKER_URL_amd64=https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}
ARG DOCKER_URL_arm=https://github.com/rancher/docker/releases/download/${DOCKER_PATCH_VERSION}/docker-${DOCKER_VERSION}_arm
ARG DOCKER_URL_arm64=https://github.com/rancher/docker/releases/download/${DOCKER_PATCH_VERSION}/docker-${DOCKER_VERSION}_arm64

ARG TOOLCHAIN_arm64=aarch64-linux-gnu
ARG TOOLCHAIN_arm=arm-linux-gnueabihf

ARG OS_RELEASES_YML=https://releases.rancher.com/os/releases.yml
ARG VBOX_MODULES_URL_amd64=https://github.com/rancher/os-vbox/releases/download/v0.0.2/vbox-modules.tar.gz

ARG OS_SERVICES_REPO=https://raw.githubusercontent.com/${OS_REPO}/os-services
ARG IMAGE_NAME=${OS_REPO}/os
ARG DFS_IMAGE=${OS_REPO}/docker:v${DOCKER_VERSION}

ARG OS_BASE_URL_amd64=https://github.com/rancher/os-base/releases/download/v2016.02/os-base_amd64.tar.xz
ARG OS_BASE_URL_arm64=https://github.com/rancher/os-base/releases/download/v2016.02/os-base_arm64.tar.xz
ARG OS_BASE_URL_arm=https://github.com/rancher/os-base/releases/download/v2016.02/os-base_arm.tar.xz

######################################################

# Set up environment
ENV DOCKER_URL DOCKER_URL_${ARCH}
ENV KERNEL_URL KERNEL_URL_${ARCH}
ENV OS_BASE_URL OS_BASE_URL_${ARCH}
ENV OS_BASE_SHA1 OS_BASE_SHA1_${ARCH}
ENV VBOX_MODULES_URL VBOX_MODULES_URL_${ARCH}

# Export all ARGS as ENV
ENV ARCH=${ARCH} DAPPER_HOST_ARCH=${DAPPER_HOST_ARCH} HOST_ARCH=${HOST_ARCH} OS_REPO=${OS_REPO} HOSTNAME_DEFAULT=${HOSTNAME_DEFAULT} DISTRIB_ID=${DISTRIB_ID} DOCKER_VERSION=${DOCKER_VERSION} DOCKER_PATCH_VERSION=${DOCKER_PATCH_VERSION} SELINUX_POLICY_URL=${SELINUX_POLICY_URL} KERNEL_URL_amd64=${KERNEL_URL_amd64} KERNEL_URL_arm64=${KERNEL_URL_arm64} DOCKER_URL_amd64=${DOCKER_URL_amd64} DOCKER_URL_arm=${DOCKER_URL_arm} DOCKER_URL_arm64=${DOCKER_URL_arm64} TOOLCHAIN_arm64=${TOOLCHAIN_arm64} TOOLCHAIN_arm=${TOOLCHAIN_arm} OS_RELEASES_YML=${OS_RELEASES_YML} VBOX_MODULES_URL=${VBOX_MODULES_URL} VBOX_MODULES_URL_amd64=${VBOX_MODULES_URL_amd64} OS_SERVICES_REPO=${OS_SERVICES_REPO} IMAGE_NAME=${IMAGE_NAME} DFS_IMAGE=${DFS_IMAGE} OS_BASE_URL=${OS_BASE_URL} OS_BASE_SHA1=${OS_BASE_SHA1} OS_BASE_URL_amd64=${OS_BASE_URL_amd64} OS_BASE_URL_arm=${OS_BASE_URL_arm} OS_BASE_URL_arm64=${OS_BASE_URL_arm64}

ENV DOWNLOADS /usr/src/downloads
RUN mkdir -p ${DOWNLOADS}

# Download kernel
RUN rm /bin/sh && ln -s /bin/bash /bin/sh
RUN if [ -n "${!KERNEL_URL}" ]; then \
        curl -fL ${!KERNEL_URL} > ${DOWNLOADS}/kernel.tar.gz \
    ;fi

# Download SELinux Policy
RUN curl -pfL ${SELINUX_POLICY_URL} > ${DOWNLOADS}/$(basename ${SELINUX_POLICY_URL})

# VBox URL
RUN if [ -n "${!VBOX_MODULES_URL}" ]; then \
        curl -pfL ${!VBOX_MODULES_URL} > ${DOWNLOADS}/vbox-modules.tar.gz \
    ;fi

# Install Go
RUN ln -sf go-6 /usr/bin/go && \
    curl -sfL https://storage.googleapis.com/golang/go1.6.src.tar.gz | tar -xzf - -C /usr/local && \
    cd /usr/local/go/src && \
    GOROOT_BOOTSTRAP=/usr GOARCH=${HOST_ARCH} GOHOSTARCH=${HOST_ARCH} ./make.bash
ENV GOPATH /go
ENV PATH ${GOPATH}/bin:/usr/local/go/bin:$PATH

# Install Docker
RUN URL=DOCKER_URL_${HOST_ARCH} && \
    curl -fL ${!URL} > /usr/bin/docker && \
    chmod +x /usr/bin/docker

# Install Docker
RUN curl -fL ${!DOCKER_URL} > ${DOWNLOADS}/docker && \
    chmod +x ${DOWNLOADS}/docker

# Install toolchain
RUN TOOLCHAIN=TOOLCHAIN_${ARCH} && \
    echo export TOOLCHAIN=${!TOOLCHAIN} > /usr/src/toolchain-env
RUN source /usr/src/toolchain-env && \
    if [ "${TOOLCHAIN}" != "" ] && ! which ${TOOLCHAIN}-gcc; then \
        apt-get install -y gcc-${TOOLCHAIN} g++-${TOOLCHAIN} \
    ;fi

RUN source /usr/src/toolchain-env; if [ "${TOOLCHAIN}" != "" ]; then \
        apt-get update && \
        cd /usr/local/src && \
        for i in libselinux libsepol pcre3 util-linux; do \
            apt-get build-dep -y $i && \
            apt-get source -y $i \
        ;done \
     ;fi

RUN source /usr/src/toolchain-env; if [ "${TOOLCHAIN}" != "" ]; then \
        cd /usr/local/src/pcre3-* && \
        autoreconf && \
        CC=${TOOLCHAIN}-gcc CXX=${TOOLCHAIN}-g++ ./configure --host=${TOOLCHAIN} --prefix=/usr/${TOOLCHAIN} && \
        make -j$(nproc) && \
        make install \
    ;fi

RUN source /usr/src/toolchain-env; if [ "${TOOLCHAIN}" != "" ]; then \
        cd /usr/local/src/libselinux-* && \
        CC=${TOOLCHAIN}-gcc CXX=${TOOLCHAIN}-g++ make CFLAGS=-Wall && \
        make PREFIX=/usr/${TOOLCHAIN} DESTDIR=/usr/${TOOLCHAIN} install && \
        cd /usr/local/src/libsepol-* && \
        CC=${TOOLCHAIN}-gcc CXX=${TOOLCHAIN}-g++ make CFLAGS=-Wall && \
        make PREFIX=/usr/${TOOLCHAIN} DESTDIR=/usr/${TOOLCHAIN} install \
    ;fi

RUN source /usr/src/toolchain-env; if [ "${TOOLCHAIN}" != "" ]; then \
        cd /usr/local/src/util-linux-* && \
        autoreconf && \
        CC=${TOOLCHAIN}-gcc CXX=${TOOLCHAIN}-g++ ./configure --host=${TOOLCHAIN} --prefix=/usr/${TOOLCHAIN} \
            --disable-all-programs \
            --enable-libmount \
            --enable-libblkid \
            --enable-libuuid \
            --enable-mount && \
        make -j$(nproc) && \
        make install \
    ;fi

ENV GOARCH $ARCH

ENV DAPPER_OUTPUT ./bin ./dist ./build/os-config.yml ./build/initrd

RUN curl -sL https://releases.rancher.com/dapper/latest/dapper-`uname -s`-`uname -m` > /usr/bin/dapper && \
    chmod +x /usr/bin/dapper

RUN mkdir -p images/00-rootfs/build && \
    curl -pfL ${!OS_BASE_URL} | tar xvJf - -C images/00-rootfs/build

ENTRYPOINT ["./scripts/entry"]
CMD ["ci"]
