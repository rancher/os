FROM ubuntu:15.10

ENV CROSS_PLATFROMS \
    arm-linux-gnueabihf \
    aarch64-linux-gnu

RUN for PLATFORM in ${CROSS_PLATFROMS}; do CROSS_PACKAGES="${CROSS_PACKAGES:-} gcc-${PLATFORM} g++-${PLATFORM}"; done \
    && apt-get update \
    && apt-get -y install \
        locales \
        sudo \
        vim \
        less \
        curl \
        wget \
        git \
        rsync \
        build-essential \
        syslinux \
        isolinux \
        xorriso \
        libblkid-dev \
        libmount-dev \
        libselinux1-dev \
        cpio \
        genisoimage \
        qemu-kvm \
        python-pip \
        ca-certificates \
        pkg-config \
        ${CROSS_PACKAGES} \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Go and docker env variables
ENV LANG=en_US.UTF-8 \
    GOPATH=/go \
    GOROOT=/usr/local/go \
    GO_VERSION=1.6 \
    DOCKER_BUILD_VERSION=1.9.1

# Dapper env variables
ENV DAPPER_DOCKER_SOCKET=true \
    DAPPER_SOURCE=/go/src/github.com/rancher/os \
    DAPPER_OUTPUT="./bin ./dist" \
    DAPPER_RUN_ARGS="--privileged" \
    SHELL=/bin/bash
WORKDIR ${DAPPER_SOURCE}

# Set the $PATH
ENV PATH $PATH:$GOROOT/bin:$GOPATH/bin

# Create $GOPATH and $GOROOT and generate locale
RUN mkdir -p $GOPATH/src $GOPATH/bin $GOROOT && chmod -R 777 $GOPATH
RUN locale-gen en_US.UTF-8

# Install the python package tox
RUN pip install tox

# Install golang
RUN curl -sSL https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $GOROOT --strip-components=1

# Get docker
RUN curl -sL https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_BUILD_VERSION} > /usr/local/bin/docker \
    && chmod +x /usr/local/bin/docker

# Copy .dockerignore
COPY .dockerignore.docker .dockerignore

RUN cd /usr/local/src \
    && apt-get update \
    && for PACKAGE in libselinux pcre3 util-linux; do \
        apt-get build-dep -y $PACKAGE && \
        apt-get source -y $PACKAGE \
    ;done \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN cd /usr/local/src/pcre3-* \
    && for PLATFORM in ${CROSS_PLATFROMS}; do \
        autoreconf \
        && CC=${PLATFORM}-gcc CXX=${PLATFORM}-g++ ./configure --host=${PLATFORM} --prefix=/usr/${PLATFORM} \
        && make -j$(nproc) \
        && make install \
    ;done


RUN cd /usr/local/src/libselinux-* \
    && for PLATFORM in ${CROSS_PLATFROMS}; do \
        CC=${PLATFORM}-gcc CXX=${PLATFORM}-g++ make CFLAGS=-Wall \
        && make PREFIX=/usr/${PLATFORM} DESTDIR=/usr/${PLATFORM} install \
    ;done

RUN cd /usr/local/src/util-linux-* \
    && for PLATFORM in ${CROSS_PLATFROMS}; do \
        autoreconf \
        && CC=${PLATFORM}-gcc CXX=${PLATFORM}-g++ ./configure --host=${PLATFORM} --prefix=/usr/${PLATFORM} \
            --disable-all-programs \
            --enable-libmount \
            --enable-libblkid \
            --enable-libuuid \
            --enable-mount \
        && make -j$(nproc) \
        && make install \
    ;done

CMD make all

ENV DAPPER_OUTPUT ./bin ./dist ./build/os-config.yml
